{"version":3,"file":"index.esm.js","sources":["../src/validateOptions.ts","../src/utils.ts","../src/constants.ts","../src/api.ts","../src/types.ts","../src/documentsToNodes.ts","../src/gatsbyImage.ts","../src/environment.browser.ts","../src/usePrismicPreview.ts","../src/mergePrismicPreviewData.ts"],"sourcesContent":["import { struct } from 'superstruct'\n\nimport { PluginOptions, BrowserPluginOptions } from './types'\n\nconst baseSchema = {\n  repositoryName: 'string',\n  accessToken: 'string?',\n  releaseID: 'string?',\n  linkResolver: 'function?',\n  htmlSerializer: 'function?',\n  fetchLinks: struct.optional(['string']),\n  lang: 'string?',\n  typePathsFilenamePrefix: 'string?',\n}\n\nconst baseDefaults = {\n  linkResolver: () => () => () => {},\n  htmlSerializer: () => () => () => {},\n  fetchLinks: [],\n  lang: '*',\n  typePathsFilenamePrefix: 'prismic-typepaths---',\n}\n\nconst PluginOptionsValidator = struct(\n  {\n    ...baseSchema,\n    schemas: struct.record(['string', 'object']),\n    shouldDownloadImage: 'function?',\n    plugins: struct.size([0, 0]),\n  },\n  {\n    ...baseDefaults,\n    shouldDownloadImage: () => () => false,\n    plugins: [],\n  },\n)\n\nconst BrowserOptionsValidator = struct(\n  {\n    ...baseSchema,\n    pathResolver: 'function?',\n    schemasDigest: 'string',\n  },\n  baseDefaults,\n)\n\nexport const validatePluginOptions = (pluginOptions: PluginOptions) =>\n  PluginOptionsValidator(pluginOptions)\n\nexport const validateBrowserOptions = (browserOptions: BrowserPluginOptions) =>\n  BrowserOptionsValidator(browserOptions)\n","import pascalcase from 'pascalcase'\n\nimport { name as pkgName } from '../package.json'\n\n/**\n * Returns a namespaced string intended for logging.\n *\n * @param message Message to namespace.\n *\n * @returns Namespaced message.\n */\nexport const msg = (message: string) => `${pkgName} - ${message}`\n\n/**\n * Maps key-value tuples of an object to new key-value tuples to create a new\n * object.\n *\n * @param fn Function that maps a key-value tuple to a new key-value tuple.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped key-values.\n */\nexport const mapObj = <T1, T2>(\n  fn: (entry: [string, T1]) => [string, T2],\n  obj: { [key: string]: T1 },\n): { [key: string]: T2 } => {\n  const entries = Object.entries(obj)\n  const pairs = entries.map(x => fn(x))\n\n  const result: { [key: string]: T2 } = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n\n/**\n * Maps key-value tuples of an object to new key-value tuples to create a new\n * object. The mapper function can be async.\n *\n * @param fn Function that maps a key-value tuple to a new key-value tuple.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped key-values.\n */\nexport const mapObjP = async <T1, T2>(\n  fn: (entry: [string, T1]) => Promise<[string, T2]>,\n  obj: { [key: string]: T1 },\n): Promise<{ [key: string]: T2 }> => {\n  const entries = Object.entries(obj)\n  const pairs = await Promise.all(entries.map(x => Promise.resolve(fn(x))))\n\n  const result: { [key: string]: T2 } = {}\n\n  for (let i = 0; i < pairs.length; i++) {\n    const [k, v] = pairs[i]\n    result[k] = v\n  }\n\n  return result\n}\n\n/**\n * Maps values of an object to new values.\n *\n * @param fn Function that maps a value and key to a new value.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped values.\n */\nexport const mapObjVals = <T1, T2>(\n  fn: (val: T1, key: string) => T2,\n  obj: { [key: string]: T1 },\n): { [key: string]: T2 } => {\n  const result: { [key: string]: T2 } = {}\n\n  for (const key in obj) result[key] = fn(obj[key], key)\n\n  return result\n}\n\n/**\n * Maps values of an object to new values.\n *\n * @param fn Function that maps a value and key to a new value.\n * @param obj Object to map to a new object.\n *\n * @returns New object with mapped values.\n */\nexport const mapObjValsP = async <T1, T2>(\n  fn: (val: T1, key: string) => Promise<T2>,\n  obj: { [key: string]: T1 },\n): Promise<{ [key: string]: T2 }> => {\n  const result: { [key: string]: T2 } = {}\n\n  const keys = Object.keys(obj)\n  await Promise.all(\n    keys.map(async key => {\n      result[key] = await fn(obj[key], key)\n    }),\n  )\n\n  return result\n}\n\n/**\n * Returns true if the provided object has no keys, false otherwise.\n *\n * @param obj Object to check.\n *\n * @returns `true` if `obj` has no keys, `false` otherwise.\n */\nexport const isEmptyObj = (obj: object) => {\n  for (const _ in obj) return false\n  return true\n}\n\n/**\n * Returns a valid GraphQL type name for a Prismic schema.\n *\n * @param apiId API ID of the schema.\n *\n * @returns Type name for the schema.\n */\nexport const buildSchemaTypeName = (apiId: string) =>\n  pascalcase(`Prismic ${apiId}`)\n\n/**\n * Determines whether the current context is the browser.\n *\n * @returns `true` if the current context is the browser, `false` otherwise.\n */\nexport const isBrowser = typeof window !== 'undefined'\n","export const BROWSER_STORE_KEY = '__GATSBY_SOURCE_PRISMIC__'\n\nexport const IMAGE_FIELD_KEYS = [\n  'alt',\n  'copyright',\n  'dimensions',\n  'url',\n] as const\n\nexport const API_PAGE_SIZE = 100\n\nexport const UUID_NAMESPACE = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`\n\nexport const PLACEHOLDER_NODE_TYPE_SUFFIX = '__PLACEHOLDER'\n","import { getApi } from 'prismic-javascript'\n\nimport { msg } from './utils'\nimport { API_PAGE_SIZE } from './constants'\n\nimport { SourceNodesArgs, Reporter } from 'gatsby'\nimport PrismicResolvedApi, {\n  QueryOptions,\n} from 'prismic-javascript/d.ts/ResolvedApi'\nimport { Document as PrismicDocument } from 'prismic-javascript/d.ts/documents'\nimport { PluginOptions } from './types'\n\nexport const createClient = async (\n  repositoryName: string,\n  accessToken?: string,\n) =>\n  await getApi(`https://${repositoryName}.prismic.io/api/v2`, { accessToken })\n\nconst pagedGet = async (\n  client: PrismicResolvedApi,\n  queryOptions: QueryOptions,\n  page: number,\n  pageSize: number,\n  documents: PrismicDocument[],\n  reporter: Reporter,\n): Promise<PrismicDocument[]> => {\n  reporter.verbose(msg(`fetching documents page ${page}`))\n\n  const response = await client.query([], { ...queryOptions, page, pageSize })\n\n  for (const doc of response.results) documents.push(doc)\n\n  if (page * pageSize < response.total_results_size)\n    return await pagedGet(\n      client,\n      queryOptions,\n      page + 1,\n      pageSize,\n      documents,\n      reporter,\n    )\n\n  return documents\n}\n\nexport const fetchAllDocuments = async (\n  pluginOptions: PluginOptions,\n  gatsbyContext: SourceNodesArgs,\n) => {\n  const { repositoryName, releaseID, accessToken, fetchLinks, lang } = pluginOptions\n  const { reporter } = gatsbyContext\n\n  const client = await createClient(repositoryName, accessToken)\n\n  const queryOptions: QueryOptions = {}\n  if (releaseID) {\n    const ref = client.refs.find(r => r.id === releaseID)\n    if (ref) {\n      queryOptions.ref = ref.ref\n    } else {\n      console.warn(`The release ${releaseID} was not found`)\n    }\n  }\n  if (fetchLinks) queryOptions.fetchLinks = fetchLinks\n  if (lang) queryOptions.lang = lang\n\n  return await pagedGet(client, queryOptions, 1, API_PAGE_SIZE, [], reporter)\n}\n","import {\n  PluginOptions as GatsbyPluginOptions,\n  SourceNodesArgs,\n  NodeInput,\n  Node,\n} from 'gatsby'\nimport { Document as PrismicDocument } from 'prismic-javascript/d.ts/documents'\nimport * as PrismicDOM from 'prismic-dom'\n\nexport type NodeID = string\n\nexport interface DocumentNodeInput extends NodeInput {\n  prismicId: PrismicDocument['id']\n  data: { [key: string]: NormalizedField }\n  dataString: string\n  dataRaw: PrismicDocument['data']\n  alternate_languages: NormalizedAlternateLanguagesField\n  url?: string\n}\n\nexport interface SliceNodeInput extends NodeInput {\n  slice_type: string\n  slice_label?: string\n  primary: { [key: string]: NormalizedField }\n  items: { [key: string]: NormalizedField }[]\n}\n\nexport interface DocumentsToNodesEnvironment {\n  createNode: (node: NodeInput) => void\n  createNodeId: (input: string) => string\n  createContentDigest: (input: unknown) => string\n  normalizeImageField: ImageFieldNormalizer\n  normalizeLinkField: LinkFieldNormalizer\n  normalizeSlicesField: SlicesFieldNormalizer\n  normalizeStructuredTextField: StructuredTextFieldNormalizer\n  typePaths: TypePath[]\n  pluginOptions: PluginOptions\n  context:\n    | DocumentsToNodesEnvironmentNodeContext\n    | DocumentsToNodesEnvironmentBrowserContext\n}\n\nexport interface DocumentsToNodesEnvironmentNodeContext {\n  gatsbyContext: SourceNodesArgs\n}\n\nexport interface DocumentsToNodesEnvironmentBrowserContext {\n  hasNodeById: (id: string) => boolean\n  getNodeById: <T>(id: string) => T & Node\n}\n\nexport interface TypePath {\n  path: string[]\n  type: GraphQLType | string\n}\n\nexport type FieldNormalizer<T, N> = (\n  apiId: string,\n  field: T,\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n) => N | Promise<N>\n\nexport type ImageFieldNormalizer = FieldNormalizer<\n  ImageField,\n  NormalizedImageField\n>\n\nexport type LinkFieldNormalizer = FieldNormalizer<\n  LinkField,\n  NormalizedLinkField\n>\n\nexport type SlicesFieldNormalizer = FieldNormalizer<\n  SliceIDsField,\n  NormalizedSlicesField\n>\n\nexport type StructuredTextFieldNormalizer = FieldNormalizer<\n  StructuredTextField,\n  NormalizedStructuredTextField\n>\n\nexport type Field =\n  | StructuredTextField\n  | ImageField\n  | SlicesField\n  | GroupField\n  | LinkField\n  | AlternateLanguagesField\n  | string\n  | number\n  | boolean\n  | null\n\nexport type NormalizedField =\n  | NormalizedStructuredTextField\n  | NormalizedImageField\n  | NormalizedSlicesField\n  | NormalizedGroupField\n  | NormalizedLinkField\n  | NormalizedAlternateLanguagesField\n  | Field\n\nexport type StructuredTextField = {\n  type: string\n  text: string\n  spans: { [key: string]: unknown }\n}[]\n\nexport interface NormalizedStructuredTextField {\n  html: string\n  text: string\n  raw: StructuredTextField\n}\n\nexport type SlicesField = Slice[]\n\ninterface Slice {\n  slice_type: string\n  slice_label: string | null\n  items: { [key: string]: Field }[]\n  primary: { [key: string]: Field }\n}\n\nexport type SliceIDsField = NodeID[]\n\nexport type NormalizedSlicesField = NodeID[]\n\nexport enum LinkFieldType {\n  Any = 'Any',\n  Document = 'Document',\n  Media = 'Media',\n  Web = 'Web',\n}\n\nexport interface LinkField {\n  link_type: LinkFieldType\n  isBroken: boolean\n  url?: string\n  target?: string\n  size?: number\n  id?: string\n  type?: string\n  tags?: string[]\n  lang?: string\n  slug?: string\n  uid?: string\n}\n\nexport interface NormalizedLinkField extends LinkField {\n  url: string\n  document?: NodeID\n  raw: LinkField\n}\n\nexport interface ImageField {\n  alt?: string\n  copyright?: string\n  dimensions?: { width: number; height: number }\n  url?: string\n  // This should be ImageThumbnailField, but TypeScript does not let us\n  // type unknown field types separatly from known without widening the type.\n  [key: string]: unknown\n}\n\nexport interface NormalizedImageField extends ImageField {\n  thumbnails?: { [key: string]: NormalizedImageField }\n  fixed?: GatsbyFixedImageProps\n  fluid?: GatsbyFluidImageProps\n  localFile?: NodeID\n}\n\ninterface GatsbyImageProps {\n  base64?: string\n  aspectRatio: number\n  src: string\n  srcWebp: string\n  srcSet: string\n  srcSetWebp: string\n}\n\nexport interface GatsbyFixedImageProps extends GatsbyImageProps {\n  width: number\n  height: number\n}\n\nexport interface GatsbyFluidImageProps extends GatsbyImageProps {\n  sizes: string\n}\n\ninterface GatsbyImageArgs {\n  quality?: number\n}\n\nexport interface GatsbyImageFluidArgs extends GatsbyImageArgs {\n  maxWidth?: number\n  maxHeight?: number\n  sizes?: string\n  srcSetBreakpoints?: number[]\n}\n\nexport interface GatsbyImageFixedArgs extends GatsbyImageArgs {\n  width?: number\n  height?: number\n}\n\nexport type AlternateLanguagesField = LinkField[]\n\nexport type NormalizedAlternateLanguagesField = AlternateLanguagesField\n\nexport type GroupField = { [key: string]: Field }[]\n\nexport type NormalizedGroupField = { [key: string]: NormalizedField }[]\n\nexport enum FieldType {\n  Boolean = 'Boolean',\n  Color = 'Color',\n  Date = 'Date',\n  Embed = 'Embed',\n  GeoPoint = 'GeoPoint',\n  Group = 'Group',\n  Image = 'Image',\n  Link = 'Link',\n  Number = 'Number',\n  Select = 'Select',\n  Slice = 'Slice',\n  Slices = 'Slices',\n  StructuredText = 'StructuredText',\n  Text = 'Text',\n  Timestamp = 'Timestamp',\n  UID = 'UID',\n  // Internal plugin-specific field not defined in the in Prismic schema.\n  AlternateLanguages = 'AlternateLanguages',\n}\n\nexport enum GraphQLType {\n  ID = 'ID',\n  Boolean = 'Boolean',\n  String = 'String',\n  Float = 'Float',\n  Date = 'Date',\n  JSON = 'JSON',\n  Link = 'PrismicLinkType',\n  Image = 'PrismicImageType',\n  ImageThumbnail = 'PrismicImageThumbnailType',\n  ImageThumbnails = 'PrismicImageThumbnailsType',\n  Embed = 'PrismicEmbedType',\n  GeoPoint = 'PrismicGeoPointType',\n  StructuredText = 'PrismicStructuredTextType',\n  AllDocumentTypes = 'PrismicAllDocumentTypes',\n  Group = 'Group',\n  Slices = 'Slices',\n  AlternateLanguages = 'AlternateLanguages',\n}\n\nexport interface GraphQLTypeObj {\n  type: GraphQLType | string\n  extensions?: { [key: string]: any }\n  resolve?: Function\n}\n\ninterface BaseFieldConfigSchema {\n  label?: string\n  labels?: { [key: string]: string[] }\n  placeholder?: string\n  [key: string]: unknown\n}\n\nexport interface BaseFieldSchema {\n  type: FieldType\n  config: BaseFieldConfigSchema\n}\n\nexport interface ImageFieldSchema extends BaseFieldSchema {\n  type: FieldType.Image\n  config: ImageFieldConfigSchema\n}\n\ninterface ThumbnailSchema {\n  name: string\n  width?: string\n  height?: string\n}\n\ninterface ImageFieldConfigSchema extends BaseFieldConfigSchema {\n  constraint?: { width?: number; height?: number }\n  thumbnails?: ThumbnailSchema[]\n}\n\nexport interface SlicesFieldSchema extends BaseFieldSchema {\n  type: FieldType.Slices\n  fieldset: string\n  config: SlicesFieldConfigSchema\n}\n\ninterface SlicesFieldConfigSchema extends BaseFieldConfigSchema {\n  choices: SliceChoicesSchema\n}\n\nexport interface SliceChoicesSchema {\n  [sliceId: string]: SliceFieldSchema\n}\n\nenum SliceChoiceDisplay {\n  List = 'list',\n  Grid = 'grid',\n}\n\nexport interface SliceFieldSchema extends BaseFieldSchema {\n  type: FieldType.Slice\n  fieldset: string\n  description: string\n  icon: string\n  display: SliceChoiceDisplay\n  repeat?: FieldsSchema\n  'non-repeat'?: FieldsSchema\n}\n\nexport interface GroupFieldSchema extends BaseFieldSchema {\n  type: FieldType.Group\n  config: GroupFieldConfigSchema\n}\n\ninterface GroupFieldConfigSchema extends BaseFieldConfigSchema {\n  fields: FieldsSchema\n}\n\nexport type FieldSchema =\n  | BaseFieldSchema\n  | ImageFieldSchema\n  | SlicesFieldSchema\n  | GroupFieldSchema\n  | SliceFieldSchema\n\nexport interface FieldsSchema {\n  [fieldId: string]: FieldSchema\n}\n\nexport interface Schema {\n  [tabName: string]: {\n    [fieldId: string]: FieldSchema\n  }\n}\n\nexport interface Schemas {\n  [schemaId: string]: Schema\n}\n\nexport type LinkResolver = (doc: object) => string\ntype PluginLinkResolver = (input: {\n  key?: string\n  value?: unknown\n  node: PrismicDocument\n}) => LinkResolver\n\nexport type HTMLSerializer = typeof PrismicDOM.HTMLSerializer\ntype PluginHTMLSerializer = (input: {\n  key: string\n  value: unknown\n  node: PrismicDocument\n}) => HTMLSerializer\n\ntype ShouldDownloadImage = (input: {\n  key: string\n  value: unknown\n  node: PrismicDocument\n}) => boolean | Promise<boolean>\n\nexport type BrowserPluginOptions = GatsbyPluginOptions &\n  Pick<\n    PluginOptions,\n    | 'repositoryName'\n    | 'accessToken'\n    | 'fetchLinks'\n    | 'schemas'\n    | 'lang'\n    | 'typePathsFilenamePrefix'\n  >\n\nexport interface PluginOptions extends GatsbyPluginOptions {\n  repositoryName: string\n  releaseID?: string\n  accessToken?: string\n  linkResolver?: PluginLinkResolver\n  htmlSerializer?: PluginHTMLSerializer\n  fetchLinks?: string[]\n  schemas: Schemas\n  lang?: string\n  shouldDownloadImage?: ShouldDownloadImage\n  shouldNormalizeImage?: ShouldDownloadImage\n  typePathsFilenamePrefix?: string\n}\n","import pascalcase from 'pascalcase'\nimport pick from 'lodash.pick'\nimport omit from 'lodash.omit'\n\nimport { mapObjValsP, buildSchemaTypeName } from './utils'\nimport { IMAGE_FIELD_KEYS } from './constants'\n\nimport { Document as PrismicDocument } from 'prismic-javascript/d.ts/documents'\nimport {\n  DocumentsToNodesEnvironment,\n  TypePath,\n  Field,\n  AlternateLanguagesField,\n  GroupField,\n  ImageField,\n  LinkField,\n  SlicesField,\n  StructuredTextField,\n  NormalizedField,\n  NormalizedAlternateLanguagesField,\n  LinkFieldType,\n  GraphQLType,\n  LinkResolver,\n  DocumentNodeInput,\n  SliceNodeInput,\n} from './types'\n\nconst getTypeForPath = (\n  path: TypePath['path'],\n  typePaths: TypePath[],\n): GraphQLType | string | undefined => {\n  const stringifiedPath = JSON.stringify(path)\n  const def = typePaths.find(x => JSON.stringify(x.path) === stringifiedPath)\n\n  if (!def) return\n  if (/^\\[.*GroupType\\]$/.test(def.type)) return GraphQLType.Group\n  if (/^\\[.*SlicesType\\]$/.test(def.type)) return GraphQLType.Slices\n\n  return def.type\n}\n\nconst normalizeField = async (\n  apiId: string,\n  field: Field,\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n): Promise<NormalizedField> => {\n  const {\n    createNodeId,\n    createNode,\n    createContentDigest,\n    typePaths,\n    normalizeStructuredTextField,\n    normalizeLinkField,\n    normalizeImageField,\n    normalizeSlicesField,\n  } = env\n\n  const type = getTypeForPath([...path, apiId], typePaths)\n\n  switch (type) {\n    case GraphQLType.Image: {\n      const baseObj: ImageField = pick(field as ImageField, IMAGE_FIELD_KEYS)\n      const thumbsObj = omit(field as ImageField, IMAGE_FIELD_KEYS) as {\n        [key: string]: ImageField\n      }\n\n      const base = await normalizeImageField(apiId, baseObj, path, doc, env)\n      const thumbs = await mapObjValsP(\n        async thumb => await normalizeImageField(apiId, thumb, path, doc, env),\n        thumbsObj,\n      )\n\n      return { ...base, thumbnails: thumbs }\n    }\n\n    case GraphQLType.StructuredText: {\n      return await normalizeStructuredTextField(\n        apiId,\n        field as StructuredTextField,\n        path,\n        doc,\n        env,\n      )\n    }\n\n    case GraphQLType.Link: {\n      return await normalizeLinkField(apiId, field as LinkField, path, doc, env)\n    }\n\n    case GraphQLType.Group: {\n      return await normalizeObjs(\n        field as GroupField,\n        [...path, apiId],\n        doc,\n        env,\n      )\n    }\n\n    case GraphQLType.Slices: {\n      const sliceNodeIds = await Promise.all(\n        (field as SlicesField).map(async (slice, index) => {\n          const sliceNodeId = createNodeId(\n            `${doc.type} ${doc.id} ${apiId} ${index}`,\n          )\n\n          const normalizedPrimary = await normalizeObj(\n            slice.primary,\n            [...path, apiId, slice.slice_type, 'primary'],\n            doc,\n            env,\n          )\n\n          const normalizedItems = await normalizeObjs(\n            slice.items,\n            [...path, apiId, slice.slice_type, 'items'],\n            doc,\n            env,\n          )\n\n          const node: SliceNodeInput = {\n            id: sliceNodeId,\n            slice_type: slice.slice_type,\n            slice_label: slice.slice_label ?? undefined,\n            primary: normalizedPrimary,\n            items: normalizedItems,\n            internal: {\n              type: pascalcase(\n                `Prismic ${doc.type} ${apiId} ${slice.slice_type}`,\n              ),\n              contentDigest: createContentDigest(slice),\n            },\n          }\n\n          createNode(node)\n\n          return node.id\n        }),\n      )\n\n      return await normalizeSlicesField(\n        apiId,\n        sliceNodeIds,\n        [...path, apiId],\n        doc,\n        env,\n      )\n    }\n\n    // This field type is not an actual Prismic type and was assigned manually\n    // in `schemasToTypeDefs.ts`.\n    case GraphQLType.AlternateLanguages: {\n      // Treat the array of alternate language documents as a list of link\n      // fields. We need to force the link type to a Document since it is not\n      // there by default.\n      return await Promise.all(\n        (field as AlternateLanguagesField).map(\n          async item =>\n            await normalizeLinkField(\n              apiId,\n              {\n                ...item,\n                link_type: LinkFieldType.Document,\n              },\n              path,\n              doc,\n              env,\n            ),\n        ),\n      )\n    }\n\n    default: {\n      return field\n    }\n  }\n}\n\nconst normalizeObj = (\n  obj: { [key: string]: Field } = {},\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n): Promise<{ [key: string]: NormalizedField }> =>\n  mapObjValsP(\n    (field, fieldApiId) => normalizeField(fieldApiId, field, path, doc, env),\n    obj,\n  )\n\nconst normalizeObjs = (\n  objs: { [key: string]: Field }[] = [],\n  path: TypePath['path'],\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n) => Promise.all(objs.map(obj => normalizeObj(obj, path, doc, env)))\n\nexport const documentToNodes = async (\n  doc: PrismicDocument,\n  env: DocumentsToNodesEnvironment,\n) => {\n  const { createNode, createContentDigest, createNodeId, pluginOptions } = env\n  const { linkResolver } = pluginOptions\n\n  let linkResolverForDoc: LinkResolver | undefined = undefined\n  if (linkResolver) linkResolverForDoc = linkResolver({ node: doc })\n\n  const docNodeId = createNodeId(`${doc.type} ${doc.id}`)\n  const docUrl = linkResolverForDoc?.(doc)\n\n  const normalizedData = await normalizeObj(\n    doc.data,\n    [doc.type, 'data'],\n    doc,\n    env,\n  )\n  const normalizedAlernativeLanguages = (await normalizeField(\n    'alternate_languages',\n    (doc.alternate_languages as unknown) as AlternateLanguagesField,\n    [doc.type],\n    doc,\n    env,\n  )) as NormalizedAlternateLanguagesField\n\n  const node: DocumentNodeInput = {\n    ...doc,\n    id: docNodeId,\n    prismicId: doc.id,\n    data: normalizedData,\n    dataString: JSON.stringify(doc.data),\n    dataRaw: doc.data,\n    alternate_languages: normalizedAlernativeLanguages,\n    url: docUrl,\n    internal: {\n      type: buildSchemaTypeName(doc.type),\n      contentDigest: createContentDigest(doc),\n    },\n  }\n\n  createNode(node)\n\n  return node.id\n}\n\nexport const documentsToNodes = async (\n  docs: PrismicDocument[],\n  env: DocumentsToNodesEnvironment,\n) => await Promise.all(docs.map(doc => documentToNodes(doc, env)))\n","import { buildImgixUrl } from 'ts-imgix'\n\nimport { ImgixUrlQueryParams, ImgixFit } from 'ts-imgix'\nimport {\n  GatsbyFixedImageProps,\n  GatsbyFluidImageProps,\n  GatsbyImageFixedArgs,\n  GatsbyImageFluidArgs,\n  GraphQLType,\n  NormalizedImageField,\n} from './types'\n\n// Default width for `fixed` images. Same as `gatsby-plugin-sharp`.\nconst DEFAULT_FIXED_WIDTH = 400\n\n// Default resolutions for `fixed` images. Same as `gatsby-plugin-sharp`.\nconst DEFAULT_FIXED_RESOLUTIONS = [1, 1.5, 2]\n\n// Default maxWidth for `fluid` images. Same as `gatsby-plugin-sharp`.\nconst DEFAULT_FLUID_MAX_WIDTH = 800\n\n// Default breakpoint factors for `fluid` images. Same as\n// `gatsby-plugin-sharp`.\nconst DEFAULT_FLUID_BREAKPOINT_FACTORS = [0.25, 0.5, 1.5, 2]\n\n/**\n * Default params for all images.\n */\nconst DEFAULT_PARAMS: ImgixUrlQueryParams = {\n  // `max` ensures the resulting image is never larger than the source file.\n  fit: ImgixFit.max,\n\n  // 50 is fairly aggressive.\n  q: 50,\n\n  // Automatically apply compression and use webp when possible.\n  auto: { compress: true, format: true },\n}\n\n/**\n * Default params for the placeholder image.\n */\nconst DEFAULT_PLACEHOLDER_PARAMS: ImgixUrlQueryParams = {\n  // 100 is greater than the default `gatsby-transformer-sharp` size, but it\n  // improves the placeholder quality significantly.\n  w: 100,\n\n  // The image requires some blurring since it may be stretched large. This\n  // softens the pixelation.\n  blur: 15,\n\n  // Since this is a low quality placeholer, we can drop down the quality.\n  q: 20,\n}\n\nconst extractURLParts = (url: string) => {\n  const instance = new URL(url)\n  const baseURL = instance.origin + instance.pathname\n  const urlParams = instance.searchParams\n\n  return { baseURL, urlParams }\n}\n\nconst buildURL = (\n  url: string,\n  params: ImgixUrlQueryParams & { rect?: string },\n) => buildImgixUrl(url)({ ...DEFAULT_PARAMS, ...params })\n\nconst buildPlaceholderURL = (\n  url: string,\n  params: ImgixUrlQueryParams & { rect?: string },\n) => buildURL(url, { ...DEFAULT_PLACEHOLDER_PARAMS, ...params })\n\nconst buildFixedSrcSet = (\n  baseURL: string,\n  params: ImgixUrlQueryParams & { rect?: string },\n  resolutions: number[] = DEFAULT_FIXED_RESOLUTIONS,\n) =>\n  resolutions\n    .map(resolution => {\n      const url = buildURL(baseURL, { ...params, dpr: resolution })\n      return `${url} ${resolution}x`\n    })\n    .join(', ')\n\nconst buildFluidSrcSet = (\n  baseURL: string,\n  aspectRatio: number,\n  params: ImgixUrlQueryParams & { w: number; rect?: string },\n  breakpoints?: number[],\n) => {\n  const { w: width } = params\n\n  if (!breakpoints)\n    breakpoints = DEFAULT_FLUID_BREAKPOINT_FACTORS.map(x => width * x)\n\n  // Remove duplicates, sort by numerical value, and ensure maxWidth is added.\n  const uniqSortedBreakpoints = [...new Set([...breakpoints, width].sort())]\n\n  return uniqSortedBreakpoints\n    .map(breakpoint => {\n      if (!breakpoint) return\n      const url = buildURL(baseURL, {\n        ...params,\n        w: breakpoint,\n        h: Math.round(breakpoint / aspectRatio),\n      })\n      return `${url} ${Math.round(breakpoint)}w`\n    })\n    .filter(Boolean)\n    .join(', ')\n}\n\nexport const buildFixedGatsbyImage = (\n  url: string,\n  sourceWidth: number,\n  sourceHeight: number,\n  args: GatsbyImageFixedArgs = {},\n): GatsbyFixedImageProps => {\n  const { baseURL, urlParams } = extractURLParts(url)\n\n  const rect = urlParams.get('rect') ?? undefined\n  const aspectRatio = sourceWidth / sourceHeight\n  const width = args.width ?? DEFAULT_FIXED_WIDTH\n  const height = args.height ?? Math.round(width / aspectRatio)\n  const quality = args.quality\n\n  const base64 = buildPlaceholderURL(baseURL, { rect })\n  const src = buildURL(baseURL, { w: width, h: height, rect, q: quality })\n  const srcSet = buildFixedSrcSet(baseURL, {\n    w: width,\n    h: height,\n    rect,\n    q: quality,\n  })\n\n  return {\n    base64,\n    aspectRatio,\n    width,\n    height,\n    src,\n    srcWebp: src,\n    srcSet,\n    srcSetWebp: srcSet,\n  }\n}\n\nexport const buildFluidGatsbyImage = (\n  url: string,\n  sourceWidth: number,\n  sourceHeight: number,\n  args: GatsbyImageFluidArgs = {},\n): GatsbyFluidImageProps => {\n  const { baseURL, urlParams } = extractURLParts(url)\n\n  const rect = urlParams.get('rect') ?? undefined\n  const aspectRatio = sourceWidth / sourceHeight\n  const width = args.maxWidth ?? DEFAULT_FLUID_MAX_WIDTH\n  const height = args.maxHeight ?? Math.round(width / aspectRatio)\n  const quality = args.quality\n  const breakpoints = args.srcSetBreakpoints\n\n  const base64 = buildPlaceholderURL(baseURL, { rect })\n  const src = buildURL(baseURL, { w: width, h: height, rect, q: quality })\n  const srcSet = buildFluidSrcSet(\n    baseURL,\n    aspectRatio,\n    { w: width, h: height, rect, q: quality },\n    breakpoints,\n  )\n\n  return {\n    base64,\n    aspectRatio,\n    src,\n    srcWebp: src,\n    srcSet,\n    srcSetWebp: srcSet,\n    sizes: '',\n  }\n}\n\nconst resolveFluid = (\n  source: NormalizedImageField,\n  args: GatsbyImageFluidArgs,\n) =>\n  source.url\n    ? buildFluidGatsbyImage(\n        source.url,\n        source.dimensions!.width,\n        source.dimensions!.height,\n        args,\n      )\n    : undefined\n\nconst resolveFixed = (\n  source: NormalizedImageField,\n  args: GatsbyImageFixedArgs,\n) =>\n  source.url\n    ? buildFixedGatsbyImage(\n        source.url,\n        source.dimensions!.width,\n        source.dimensions!.height,\n        args,\n      )\n    : undefined\n\nexport const resolvers = {\n  [GraphQLType.Image]: {\n    fixed: { resolve: resolveFixed },\n    fluid: { resolve: resolveFluid },\n  },\n  [GraphQLType.ImageThumbnail]: {\n    fixed: { resolve: resolveFixed },\n    fluid: { resolve: resolveFluid },\n  },\n}\n","import {\n  Link as PrismicDOMLink,\n  RichText as PrismicDOMRichText,\n} from 'prismic-dom'\nimport { v5 as uuidv5 } from 'uuid'\nimport md5 from 'md5'\n\nimport { createClient } from './api'\nimport { documentToNodes } from './documentsToNodes'\nimport { buildFixedGatsbyImage, buildFluidGatsbyImage } from './gatsbyImage'\nimport { buildSchemaTypeName } from './utils'\nimport { UUID_NAMESPACE, PLACEHOLDER_NODE_TYPE_SUFFIX } from './constants'\n\nimport { NodeInput } from 'gatsby'\nimport { QueryOptions } from 'prismic-javascript/d.ts/ResolvedApi'\nimport {\n  BrowserPluginOptions,\n  DocumentsToNodesEnvironment,\n  DocumentsToNodesEnvironmentBrowserContext,\n  HTMLSerializer,\n  ImageFieldNormalizer,\n  LinkField,\n  LinkFieldNormalizer,\n  LinkFieldType,\n  LinkResolver,\n  NormalizedLinkField,\n  SlicesFieldNormalizer,\n  StructuredTextFieldNormalizer,\n  TypePath,\n} from './types'\n\ninterface UnbrokenDocumentLinkField extends LinkField {\n  link_type: LinkFieldType.Document\n  id: string\n  isBroken: false\n}\n\nconst loadLinkFieldDocument = async (\n  field: UnbrokenDocumentLinkField,\n  env: DocumentsToNodesEnvironment,\n) => {\n  const {\n    createNode,\n    createNodeId,\n    createContentDigest,\n    pluginOptions,\n    context,\n  } = env\n  if (field.link_type !== LinkFieldType.Document || !field.id || field.isBroken)\n    return\n\n  const { hasNodeById } = context as DocumentsToNodesEnvironmentBrowserContext\n  const { repositoryName, accessToken, fetchLinks } = pluginOptions\n\n  const linkedDocId = createNodeId(`${field.type} ${field.id}`)\n\n  // Skip the fetch process if the node already exists in the store.\n  if (hasNodeById(linkedDocId)) return\n\n  // Create a placeholder node in the store to prevent infinite recursion. This\n  // placeholder will be replaced with the actual node during the\n  // `documentToNodes` call.\n  createNode({\n    id: linkedDocId,\n    internal: {\n      type: buildSchemaTypeName(field.type!) + PLACEHOLDER_NODE_TYPE_SUFFIX,\n      contentDigest: createContentDigest(linkedDocId),\n    },\n  })\n\n  const queryOptions: QueryOptions = {}\n  if (fetchLinks) queryOptions.fetchLinks = fetchLinks\n\n  // Query Prismic's API for the document.\n  const client = await createClient(repositoryName, accessToken)\n  const doc = await client.getByID(field.id, queryOptions)\n\n  await documentToNodes(doc, env)\n}\n\nconst normalizeImageField: ImageFieldNormalizer = async (\n  _apiId,\n  field,\n  _path,\n  _doc,\n  _env,\n) => {\n  const url = field.url\n\n  if (!url) return field\n\n  const fixed = buildFixedGatsbyImage(\n    url,\n    field.dimensions!.width,\n    field.dimensions!.height,\n  )\n\n  const fluid = buildFluidGatsbyImage(\n    url,\n    field.dimensions!.width,\n    field.dimensions!.height,\n  )\n\n  return { ...field, fixed, fluid }\n}\n\n// TODO: Abstract proxy handler for any `getNodeById` needs (e.g. Slices).\nconst normalizeLinkField: LinkFieldNormalizer = async (\n  apiId,\n  field,\n  _path,\n  doc,\n  env,\n) => {\n  const { createNodeId, pluginOptions, context } = env\n  const { getNodeById } = context as DocumentsToNodesEnvironmentBrowserContext\n  const { linkResolver } = pluginOptions\n\n  let linkResolverForField: LinkResolver | undefined = undefined\n  if (linkResolver)\n    linkResolverForField = linkResolver({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n  const linkedDocId = createNodeId(`${field.type} ${field.id}`)\n\n  if (field.link_type === LinkFieldType.Document && field.id && !field.isBroken)\n    await loadLinkFieldDocument(field as UnbrokenDocumentLinkField, env)\n\n  return new Proxy(\n    {\n      ...field,\n      url: PrismicDOMLink.url(field, linkResolverForField),\n      document: linkedDocId,\n      raw: field,\n    },\n    {\n      get: (obj, prop: keyof NormalizedLinkField) => {\n        if (prop === 'document') {\n          if (\n            field.link_type === LinkFieldType.Document &&\n            field.id &&\n            !field.isBroken\n          )\n            return getNodeById(linkedDocId)\n\n          return null\n        }\n\n        return obj[prop]\n      },\n    },\n  )\n}\n\nconst normalizeSlicesField: SlicesFieldNormalizer = (\n  _apiId,\n  field,\n  _path,\n  _doc,\n  env,\n) => {\n  const { context } = env\n  const {\n    hasNodeById,\n    getNodeById,\n  } = context as DocumentsToNodesEnvironmentBrowserContext\n\n  return new Proxy(field, {\n    get: (obj, prop: number) => {\n      const id = obj[prop]\n\n      if (hasNodeById(id)) {\n        const node = getNodeById(id)\n        return { ...node, __typename: node.internal.type }\n      }\n\n      return id\n    },\n  })\n}\n\nconst normalizeStructuredTextField: StructuredTextFieldNormalizer = async (\n  apiId,\n  field,\n  _path,\n  doc,\n  env,\n) => {\n  const { pluginOptions } = env\n  const { linkResolver, htmlSerializer } = pluginOptions\n\n  let linkResolverForField: LinkResolver | undefined = undefined\n  if (linkResolver)\n    linkResolverForField = linkResolver({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n\n  let htmlSerializerForField: HTMLSerializer | undefined = undefined\n  if (htmlSerializer)\n    htmlSerializerForField = htmlSerializer({\n      key: apiId,\n      value: field,\n      node: doc,\n    })\n\n  return {\n    html: PrismicDOMRichText.asHtml(\n      field,\n      linkResolverForField,\n      htmlSerializerForField,\n    ),\n    text: PrismicDOMRichText.asText(field),\n    raw: field,\n  }\n}\n\nexport const createEnvironment = (\n  pluginOptions: BrowserPluginOptions,\n  typePaths: TypePath[],\n): DocumentsToNodesEnvironment => {\n  const nodeStore = new Map()\n\n  const createNode = (node: NodeInput) => void nodeStore.set(node.id, node)\n  const createNodeId = (input: string) => uuidv5(input, UUID_NAMESPACE)\n  const createContentDigest = (input: unknown) => md5(JSON.stringify(input))\n  const hasNodeById = (id: string) => nodeStore.has(id)\n  const getNodeById = (id: string) => nodeStore.get(id)\n\n  return {\n    createNode,\n    createNodeId,\n    createContentDigest,\n    normalizeImageField,\n    normalizeLinkField,\n    normalizeSlicesField,\n    normalizeStructuredTextField,\n    typePaths,\n    pluginOptions,\n    context: { hasNodeById, getNodeById },\n  }\n}\n","import { useReducer, useEffect, useCallback, useMemo } from 'react'\nimport { set as setCookie } from 'es-cookie'\nimport { previewCookie } from 'prismic-javascript'\nimport camelCase from 'camelcase'\n\nimport { validateBrowserOptions } from './validateOptions'\nimport { createClient } from './api'\nimport { createEnvironment } from './environment.browser'\nimport { documentToNodes } from './documentsToNodes'\nimport { isBrowser } from './utils'\nimport { BROWSER_STORE_KEY } from './constants'\n\nimport { Node } from 'gatsby'\nimport { QueryOptions } from 'prismic-javascript/d.ts/ResolvedApi'\nimport {\n  PluginOptions,\n  DocumentsToNodesEnvironmentBrowserContext,\n  BrowserPluginOptions,\n} from './types'\n\ntype Options = Pick<\n  PluginOptions,\n  | 'repositoryName'\n  | 'accessToken'\n  | 'linkResolver'\n  | 'htmlSerializer'\n  | 'fetchLinks'\n  | 'lang'\n  | 'typePathsFilenamePrefix'\n  | 'schemas'\n> & {\n  pathResolver?: PluginOptions['linkResolver']\n  schemasDigest?: string\n}\n\nenum ActionType {\n  IS_NOT_PREVIEW = 'IS_NOT_PREVIEW',\n  IS_PREVIEW = 'IS_PREVIEW',\n  DOCUMENT_LOADED = 'DOCUMENT_LOADED',\n  RESET = 'RESET',\n}\n\ninterface Action {\n  type: ActionType\n  payload?: {\n    rootNode: Node\n    path?: string\n  }\n}\n\ninterface State {\n  isPreview?: boolean\n  isLoading: boolean\n  previewData?: { [key: string]: Node }\n  path?: string\n}\n\nconst initialState: State = {\n  isPreview: undefined,\n  isLoading: false,\n  previewData: undefined,\n  path: undefined,\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.IS_NOT_PREVIEW: {\n      return { ...state, isPreview: false, isLoading: false }\n    }\n\n    case ActionType.IS_PREVIEW: {\n      return { ...state, isPreview: true, isLoading: true }\n    }\n\n    case ActionType.DOCUMENT_LOADED: {\n      if (!action.payload)\n        return { ...state, isPreview: false, isLoading: false }\n\n      const { rootNode, path } = action.payload\n      const type = camelCase(rootNode.internal.type)\n      const previewData = { [type]: rootNode }\n\n      return { ...state, previewData, path, isPreview: true, isLoading: false }\n    }\n\n    case ActionType.RESET: {\n      return initialState\n    }\n\n    default:\n      throw new Error('Invalid error')\n  }\n}\n\nexport const usePrismicPreview = (options: Options) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const hydratedOptions: Options & {\n    plugins: []\n    lang: string\n    typePathsFilenamePrefix: string\n    schemasDigest: string\n  } = useMemo(() => {\n    if (!isBrowser) return options\n\n    const context = window[BROWSER_STORE_KEY][options.repositoryName]\n\n    if (!context)\n      throw new Error(\n        `Could not find plugin context for repository: \"${options.repositoryName}\". Check that a gatsby-source-plugin instance exists for that repository. `,\n      )\n\n    return validateBrowserOptions({\n      ...context.pluginOptions,\n      schemasDigest: context.schemasDigest,\n      ...options,\n    })\n  }, [options])\n\n  const { token, documentId } = useMemo(() => {\n    if (!isBrowser) return {}\n\n    const params = new URLSearchParams(window.location.search)\n\n    return {\n      token: params.get('token') ?? undefined,\n      documentId: params.get('documentId') ?? undefined,\n    }\n  }, [isBrowser ? window.location.search : undefined])\n\n  /**\n   * Set the preview status as soon as possible.\n   */\n  useEffect(() => {\n    const isPreview = Boolean(token && documentId)\n\n    dispatch({\n      type: isPreview ? ActionType.IS_PREVIEW : ActionType.IS_NOT_PREVIEW,\n    })\n  }, [token, documentId])\n\n  const asyncEffect = useCallback(async () => {\n    if (!state.isPreview || !token || !documentId) return\n\n    setCookie(previewCookie, token)\n\n    const queryOptions: QueryOptions = {}\n    if (hydratedOptions.fetchLinks)\n      queryOptions.fetchLinks = hydratedOptions.fetchLinks\n\n    // Query Prismic's API for the document.\n    const client = await createClient(\n      hydratedOptions.repositoryName,\n      hydratedOptions.accessToken,\n    )\n    const doc = await client.getByID(documentId, queryOptions)\n\n    // Process the document into nodes.\n    const typePathsRes = await fetch(\n      `/${hydratedOptions.typePathsFilenamePrefix}${hydratedOptions.schemasDigest}.json`,\n      { headers: { 'Content-Type': 'application/json' } },\n    )\n    const typePaths = await typePathsRes.json()\n    const env = createEnvironment(\n      hydratedOptions as BrowserPluginOptions,\n      typePaths,\n    )\n    const { context } = env\n    const { getNodeById } = context as DocumentsToNodesEnvironmentBrowserContext\n    const rootNodeId = await documentToNodes(doc, env)\n    const rootNode = getNodeById(rootNodeId)\n\n    const path = (\n      hydratedOptions.pathResolver ?? hydratedOptions.linkResolver\n    )?.({ node: doc })?.(doc)\n\n    dispatch({ type: ActionType.DOCUMENT_LOADED, payload: { rootNode, path } })\n  }, [state.isPreview])\n\n  useEffect(() => {\n    asyncEffect()\n  }, [asyncEffect])\n\n  return state\n}\n","import isPlainObject from 'lodash.isplainobject'\n\nimport { Node } from 'gatsby'\n\ninterface NodeTree {\n  [key: string]: Node\n}\n\ninterface MergePrismicPreviewDataArgs {\n  staticData?: { [key: string]: any }\n  previewData?: NodeTree\n}\n\nconst traverseAndReplace = (node: any, replacementNode: Node): any => {\n  if (isPlainObject(node)) {\n    // If the node shares the same Prismic ID, replace it.\n    if (node.prismicId === replacementNode.prismicId) return replacementNode\n\n    // We did not find the Node to replace. Iterate all properties and continue\n    // to find the Node.\n    const newNode: typeof node = {}\n    for (const subnodeKey in node)\n      newNode[subnodeKey] = traverseAndReplace(\n        node[subnodeKey],\n        replacementNode,\n      )\n    return newNode\n  }\n\n  // Iterate all elements in the node to find the Node.\n  if (Array.isArray(node))\n    return node.map(subnode => traverseAndReplace(subnode, replacementNode))\n\n  // If the node is not an object or array, it cannot be a Node.\n  return node\n}\n\nexport const mergePrismicPreviewData = (\n  args: MergePrismicPreviewDataArgs,\n): NodeTree | undefined => {\n  const { staticData, previewData } = args\n\n  if (!staticData && !previewData) return\n  if (!staticData) return previewData\n  if (!previewData) return staticData\n\n  const previewDataRootNodeKey = Object.keys(previewData)[0]\n  if (staticData.hasOwnProperty(previewDataRootNodeKey))\n    return { ...staticData, ...previewData }\n\n  return traverseAndReplace(staticData, previewData[previewDataRootNodeKey])\n}\n"],"names":["PrismicDOMLink","PrismicDOMRichText","uuidv5","setCookie"],"mappings":"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"}